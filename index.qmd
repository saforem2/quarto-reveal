---
title: "Quarto + reveal.js"
author: "Sam Foreman"
date: "2023-06-05"
format:
  revealjs:
    theme: [dark, custom.scss]
    center: true
    self-contained: true
    embed-resources: true
    highlight-style: "atom-one"
    default-image-extension: svg
---

#  {background-color="white" background-iframe="grid-worms/index.html"}

::: {style="background-color:#ffffffbb; border-radius: 10px; padding: 5px;"}
::: r-fit-text
PASC 23
:::

:::


# Overview

```{python}
#| code-fold: true
#| echo: true
import numpy as np
x = np.random.rand()
print(x)
```

::: {.notes}
Speaker notes go here.
:::

# Columns

:::: {.columns}

::: {.column width="40%"}
Left column
:::

::: {.column width="60%"}
Right column
:::

::::

# Python {.scrollable}

For a demonstration of a line plot on a polar axis, see @fig-polar

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"
#| echo: true
#| output-location: slide
import numpy as np
import matplotlib.pyplot as plt

plt.rcParams.update({
    'axes.facecolor': 'none',
    'figure.facecolor': 'none',
    'savefig.facecolor': 'none',
    'savefig.format': 'svg',
    'axes.edgecolor': 'none',
    'axes.grid': True,
    'axes.labelcolor': '#666',
    'axes.titlecolor': '#666',
    'grid.color': '#666',
    'text.color': '#666',
    'grid.linestyle': '--',
    'grid.linewidth': 0.5,
    'grid.alpha': 0.4,
    'xtick.color': 'none',
    'ytick.color': 'none',
    'xtick.labelcolor': '#666',
    'legend.edgecolor': 'none',
    'ytick.labelcolor': '#666',
    'savefig.transparent': True,
})

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fix, ax = plt.subplots(
    subplot_kw = {'projection': 'polar'}
)
assert isinstance(ax, plt.PolarAxes)
ax.plot(theta, r)
ax.set_rticks([0.5, 1., 1.5, 2.])
ax.grid(True)
plt.show()
```

## Plotly

```{python}
#| label: fig-plotly
#| fig-cap: "A plot made using plotly express"

import plotly.express as px
gapminder = px.data.gapminder()
gapminder2007 = gapminder.query('year == 2007')
fig = px.scatter(
    gapminder2007,
    x="gdpPercap",
    y="lifeExp",
    color="continent",
    size="pop",
    size_max=60,
    hover_name="country",
    template="plotly_dark",
)
fig.show()
```

## Jupyter Widgets

```{python}
from ipyleaflet import Map, Marker, basemaps, basemap_to_tiles
m = Map(
  basemap=basemap_to_tiles(
    basemaps.NASAGIBS.ModisTerraTrueColorCR, "2017-04-08"
  ),
  center=(52.204793, 360.121558),
  zoom=4
)
m.add_layer(Marker(location=(52.204793, 360.121558)))
m
```

## Figures with Subcaptions

```{python}
#| label: fig-charts
#| fig-cap: "Charts"
#| fig-subcap: 
#|   - "First"
#|   - "Second"
#| layout-ncol: 2

import matplotlib.pyplot as plt
plt.plot([1,23,2,4])
plt.show()

plt.plot([8,65,23,90])
plt.show()
```

# Mermaid Diagrams

```{mermaid}
flowchart TB
  A --> C
  A --> D
  B --> C
  B --> D
```

## Block Layout

::: {layout-ncol=2}
### List One

- Item A
- Item B
- Item C

### List Two

- Item X
- Item Y
- Item Z
:::


## Placing Colorbars {.scrollable}

Colorbars indicate the quantitative extent of image data.
Placing in a figure is non-trivial because room needs to
be made for them. The simplest case is just attaching a 
colorbar to each axes:^[See the [Matplotlib Gallery](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/colorbar_placement.html) to explore colorbars further].

```{python}
#| code-fold: true
import matplotlib.pyplot as plt
import numpy as np

fig, axs = plt.subplots(2, 2, figsize=(16, 12))
assert isinstance(fig, plt.Figure)
cmaps = ['RdBu_r', 'viridis']
for col in range(2):
    for row in range(2):
        ax = axs[row, col]
        pcm = ax.pcolormesh(
          np.random.random((20, 20)) * (col + 1),
          cmap=cmaps[col]
        )
        fig.colorbar(pcm, ax=ax)
ax.grid(False)
plt.show()
```

# Model Parallel Training: Example

$$y = w_0 * x_0 + w_1 * x_1 + w_2 * x_2$$

1. Compute $y_{0} = w_{0} * x_{0}$ and send to $\longrightarrow$ `GPU1`
2. Compute $y_{1} = y_{0} + w_{1} * x_{1}$ and send to $\longrightarrow$ `GPU2`
3. Compute $y = y_{1} * w_{2} * x_{2}$ âœ…


```{mermaid}
flowchart LR
  subgraph X0["GPU0"]
    direction LR
    a["w0"]
  end
  subgraph X1["GPU1"]
    direction LR
    b["w1"]
  end
  subgraph X2["GPU2"]
    direction LR
    c["w2"]
  end
  X1 & X0 <--> X2
  X0 <--> X1
  x["x0, x1, x2"] --> X0
```

## Extras

::: {.callout-note}
Note that there are five types of callouts, including:
`note`, `tip`, `warning`, `caution`, and `important`.
:::


- Testing lists
- Testing
  - Testing
  - Testing again
    - triple Checkboxes
  - Nested lists
    - [x] Checkboxes ??

# Thank you!

```{=html}
<style type="text/css">
:root {
  --r-heading-font-weight: 500;
  --r-heading1-size: 2.0em;
  -webkit-font-smoothing:subpixel-antialiased;
  --font-smoothing:subpixel-antialiased;
}
.note {
  color:#f8f8f8;
  border-radius:8px;
  background-color:#35353540;
  width: max-content;
  border-color:#66666640;
  padding: auto;
  margin:auto;
}
</style>
```
